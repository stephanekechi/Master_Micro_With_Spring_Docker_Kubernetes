==> Challenge 1 with Microservices (Right Sizing & Identifying Service Boundaries)

    -> One of the most challenging aspects of building a successful microservices' system is the identification of proper
        microservice boundaries and defining the size of each microservice

    -> Below are the most common followed approaches in the industry
        # Domain-Driven Sizing: since many of our modifications or enhancements driven by the business needs, we can size/define boundaries of our
            microservices that are closely aligned with Domain-Driven & Business capabilities. But this process takes lot of time and need good domain knowledge.

    -> Event Storming Sizing: Conducting an interactive fun session among various stakeholder to identify the list of important events in the system like
        'Completed Payment', 'Search for a Product' etc. Based on the events we can identify 'Commands', 'Reactions' and can try to group them to a Domain-Driven services.


==> Cloud Native Applications
        Intro

   -> Cloud-native applications are a collection of small, independent, and loosely coupled services. They are designed to deliver well-recognized business value, like the ability to rapidly incorporate
        user feedback for continuous improvement. Its goal is to deliver apps users want at the pace a business needs.

   -> If an apps is "cloud-native", it's specifically designed to provide a consistent development and automated management experience across private, public, and hybrid clouds.
        So it's about how applications are created and deployed, not where.

   -> When creating cloud-native applications, the developers divide the functions into microservices, with scalable components such as containers in order to be able to run on several servers. These services
        are managed by virtual infrastructures through DevOps processes with continuous delivery workflows. It's important to understand that these types of applications do not require any change or conversion to work in the
        cloud and are designed to deal with the unavailability of downstream components.

 ==> Principles of Cloud-Native Applications

    -> 1. Microservice:
        A Micro-Services architecture breaks apps downs into their smallest components, independent from each other.

    -> 2. Containers:
        Containers allow apps to be packaged and isolated with their entire runtime environment, making iT easy to move them between environments while retaining full functionality.

    -> 3. Devops:
        Devops is an approach to culture, automation, and platform design intended to deliver increased business value and responsiveness.

    -> 4. Continuous Delivery:
        It's a software development practice in which the process of delivering software is automated to allow short-term deliveries into a production environment.

==> Challenge 4 with Microservices: Service Discovery  & Registration
    => How do services locate each other inside a network?
        -> each instance of a microservice exposes a remote API with its own host and port. How do other microservices & clients know about these dynamic endpoint URLs to invoke them.
            So where is my services.
    => How do new service instances enter into the network?
        -> If a microservice instance fails, new instances will be brought online to ensure constant availability. This means that the IP addresses of the instances can start serving to the clients?
    => Load Balance, Info Sharing b/w the multiple microservice instances especially a microservice is invoking another microservice? How do a specific service information shared across the network.

==> Challenge 5 with MicroServices: Handling residencies:
    => Circuit Breaker Pattern:
        different states: #Open, #Closed, #Half-Closed
    => Retry Pattern
        with it, it's possible to configure:
        # maxAttempts - the maximum number of attempts.
        # waitDuration - A fixed wait duration between retry attempts.
        # retryExceptions - Configures a list of Throwable classes that are recorded as a failure and thus are retried.
        # IgnoreExceptions - Configures a list of Throwable classes that are ignored and thus are not retried.
    => Rate Limiter Pattern
        with it, we can configure the following values:
        # timeoutDuration - the default wait time a threat waits for a permission
        # limitForPeriod - the number of permissions available during one limit refresh period.
        # limitRefreshPeriod - the period of a limit refresh. After each period the rate limiter sets its permission count back to the limitForPeriod value.
        ## We can also define a fallback mechanism if the service call fails due to rate limiter configurations
    => Bulkhead Pattern
        with it, we can configure the following values:
        # maxConcurrentCalls - Max amount of parallel executions
        # maxWaitDuration - Max amount of time a thread should be blocked for when attempting to enter a saturated bulkhead.

    Challenge 6 with MicroServices: Routing, Cross cutting concerns
    => Spring Cloud Gateway is a library for building an API gateway. It is intended to sit between a requester and a resource that's being requested, where it
        intercepts, analyses, and modifies every request. That means you can route requests based on their context. Did a request include a header indicating an API version?
        We can route that request to the appropriately versioned backend. Does the request require sticky sessions? The Gateway can keep track of each user's session.